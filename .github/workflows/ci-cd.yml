name: CI and Deployment for Sui Move Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Sui Binaries
      run: |
        # Fetch the official Sui installer script and execute it
        # This command downloads and runs the installer, adding sui to the PATH.
        # The exact URL and script might change; always refer to official Sui documentation.
        curl -L https://github.com/MystenLabs/sui/releases/latest/download/sui-installer.sh | sh -s -- -y -t # -t for toolchain only, -y for non-interactive
        # Add Sui to PATH for subsequent steps in this job
        echo "$HOME/.sui/bin" >> $GITHUB_PATH
        # Source cargo env if needed by sui installer (often done by the installer itself)
        # source "$HOME/.cargo/env" 
      shell: bash

    - name: Verify Installation
      run: |
        sui --version
        move --version
      shell: bash

    - name: Build Project (Installs Dependencies)
      run: |
        sui move build --path . # Assumes Move.toml is in the root
      shell: bash

    - name: Run Tests
      run: |
        sui move test --path . # Assumes Move.toml is in the root
      shell: bash

  deploy_to_testnet: # Renamed for clarity
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Example: Deploy only on push to main

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Sui Binaries
      run: |
        curl -L https://github.com/MystenLabs/sui/releases/latest/download/sui-installer.sh | sh -s -- -y -t
        echo "$HOME/.sui/bin" >> $GITHUB_PATH
        # source "$HOME/.cargo/env"
      shell: bash

    - name: Configure Sui Client for Deployment (Example)
      # This step would use secrets to configure the client for the target network
      # It might involve importing a private key or setting active network/address
      env:
        SUI_KEYSTORE_PATH: ${{ secrets.SUI_KEYSTORE_BASE64 }} # Keystore file base64 encoded
        SUI_NETWORK_CONFIG: ${{ secrets.SUI_NETWORK_CONFIG_YAML }} # client.yaml or network.yaml content
      run: |
        echo "Setting up Sui client..."
        # Example: Decode keystore if provided as base64
        # if [ -n "$SUI_KEYSTORE_PATH" ]; then
        #   mkdir -p $HOME/.sui/sui_config
        #   echo "$SUI_KEYSTORE_PATH" | base64 --decode > $HOME/.sui/sui_config/sui.keystore
        # fi
        # Example: Write network config if provided
        # if [ -n "$SUI_NETWORK_CONFIG" ]; then
        #   mkdir -p $HOME/.sui/sui_config
        #   echo "$SUI_NETWORK_CONFIG" > $HOME/.sui/sui_config/client.yaml
        # fi
        # sui client switch --env testnet # Or use an alias if configured in client.yaml
        # sui client active-address # Verify the deployer address
      shell: bash

    - name: Deploy Contracts to Testnet
      env:
        # Pass any secrets needed by deploy.sh as environment variables
        # SUI_DEPLOYER_ADDRESS: ${{ secrets.SUI_DEPLOYER_ADDRESS }}
        # SUI_GAS_OBJECT_ID: ${{ secrets.SUI_GAS_OBJECT_ID_TESTNET }}
      run: |
        chmod +x ./scripts/deploy.sh
        ./scripts/deploy.sh # Ensure deploy.sh uses environment variables or configured Sui client
      shell: bash
