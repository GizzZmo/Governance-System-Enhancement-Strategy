name: CI and Deployment for Sui Move Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable # Or a specific Rust version compatible with Sui
        profile: minimal
        override: true

    - name: Install Sui Binaries using Cargo
      run: |
        set -e # Exit immediately if a command exits with a non-zero status
        set -x # Echo each command before executing

        echo "Installing Sui binaries using cargo..."
        # This command installs the 'sui' executable from the specified branch of the Sui repository.
        # The 'sui' executable includes the Sui Move CLI.
        # Using '--locked' ensures that the command uses the versions specified in the fetched Cargo.lock.
        # Choose a branch that matches your target network (e.g., 'devnet', 'testnet', 'main').
        # 'main' branch can be volatile; for stability, consider a release tag or a specific network branch.
        cargo install --locked --git https://github.com/MystenLabs/sui.git --branch devnet sui
        # cargo install --locked --git https://github.com/MystenLabs/sui.git --branch testnet sui # Alternative for testnet
        # cargo install --locked --git https://github.com/MystenLabs/sui.git --branch main sui # For latest main

        INSTALL_EXIT_CODE=$?
        if [ $INSTALL_EXIT_CODE -ne 0 ]; then
          echo "Error: cargo install for Sui failed with exit code $INSTALL_EXIT_CODE."
          exit $INSTALL_EXIT_CODE
        fi

        # Add cargo's bin directory to GITHUB_PATH so 'sui' and 'move' CLIs are available.
        # actions-rs/toolchain usually adds this, but explicit addition is safer.
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        set +x
      shell: bash

    - name: Verify Installation
      run: |
        sui --version
        move --version
      shell: bash

    - name: Build Project (Also Fetches Dependencies)
      run: |
        sui move build --path .
      shell: bash

    - name: Run Tests
      run: |
        sui move test --path .
      shell: bash

  deploy_to_testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Install Sui Binaries using Cargo
      run: |
        set -e
        set -x
        echo "Installing Sui binaries using cargo for deployment..."
        # Ensure this branch matches the target network or desired stability
        cargo install --locked --git https://github.com/MystenLabs/sui.git --branch devnet sui
        INSTALL_EXIT_CODE=$?
        if [ $INSTALL_EXIT_CODE -ne 0 ]; then echo "Error: cargo install for Sui failed."; exit $INSTALL_EXIT_CODE; fi
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        set +x
      shell: bash

    - name: Configure Sui Client for Deployment
      env:
        SUI_TESTNET_RPC_URL: ${{ secrets.SUI_TESTNET_RPC_URL }}
        SUI_DEPLOYER_PRIVATE_KEY_BASE64: ${{ secrets.SUI_DEPLOYER_PRIVATE_KEY_BASE64 }}
        SUI_DEPLOYER_ALIAS: "testnet-deployer-ci"
      run: |
        set -e
        set -x

        echo "Setting up Sui client for Testnet deployment..."
        mkdir -p $HOME/.sui/sui_config

        if [ -n "$SUI_TESTNET_RPC_URL" ]; then
          sui client new-env --alias ci-testnet --rpc "$SUI_TESTNET_RPC_URL"
          sui client switch --env ci-testnet
          echo "Switched to ci-testnet environment with RPC: $SUI_TESTNET_RPC_URL"
        else
          sui client switch --env testnet || echo "Warning: Failed to switch to default 'testnet' env. Using active env."
        fi

        echo "Importing private key..."
        if [ -z "$SUI_DEPLOYER_PRIVATE_KEY_BASE64" ]; then
          echo "Error: SUI_DEPLOYER_PRIVATE_KEY_BASE64 secret not set."
          exit 1
        fi

        sui client remove-alias "$SUI_DEPLOYER_ALIAS" || echo "Alias $SUI_DEPLOYER_ALIAS did not exist or could not be removed."

        DECODED_KEY_HEX=$(echo "$SUI_DEPLOYER_PRIVATE_KEY_BASE64" | base64 --decode | xxd -p -c 200)
        if [ -z "$DECODED_KEY_HEX" ]; then
           echo "Warning: Decoding private key from base64 resulted in empty or non-hex key for logging."
        fi
        echo "Private key decoded (hex representation for logging/debug: $DECODED_KEY_HEX)."

        echo "$SUI_DEPLOYER_PRIVATE_KEY_BASE64" | base64 --decode | sui client import-private-key --alias "$SUI_DEPLOYER_ALIAS"

        sui client switch --address "$SUI_DEPLOYER_ALIAS"
        echo "Switched active address to $SUI_DEPLOYER_ALIAS"

        echo "Verifying client configuration..."
        sui client active-env
        sui client active-address
        sui client gas --json
        echo "Sui client setup complete."
        set +x
      shell: bash

    - name: Deploy Contracts to Testnet
      env:
        SUI_TARGET_RPC_URL: ${{ secrets.SUI_TESTNET_RPC_URL }}
        SUI_DEPLOYER_ADDRESS_FOR_SCRIPT: ${{ env.SUI_DEPLOYER_ALIAS }}
        SUI_GAS_COIN_ID_FOR_SCRIPT: ${{ secrets.SUI_GAS_OBJECT_ID_TESTNET }}
      run: |
        chmod +x ./scripts/deploy.sh
        echo "Executing deploy.sh script..."
        echo "RPC URL for script (if used by deploy.sh): $SUI_TARGET_RPC_URL"
        echo "Deployer Alias for script (if used by deploy.sh): $SUI_DEPLOYER_ADDRESS_FOR_SCRIPT"
        echo "Gas Coin ID for script (if used by deploy.sh): $SUI_GAS_COIN_ID_FOR_SCRIPT"
        ./scripts/deploy.sh
      shell: bash
