---
name: Monitoring & Notifications

"on":
  workflow_run:
    workflows:
      - "Comprehensive CI/CD Pipeline"
      - "Security & Vulnerability Scanning"
      - "Release Automation & Changelog Generation"
    types:
      - completed
  schedule:
    # Daily health check at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Type of notification to send'
        required: true
        default: 'health-check'
        type: choice
        options:
          - health-check
          - status-report
          - alert-test

jobs:
  # Monitor workflow health
  workflow-health-check:
    name: Workflow Health Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Analyze Recent Workflows
        uses: actions/github-script@v6
        id: workflow_analysis
        with:
        script: |
          const fs = require('fs');

          // Get recent workflow runs
          const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 50
          });

          const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);
          const recentRuns = runs.workflow_runs.filter(run =>
            new Date(run.created_at) > last24Hours
          );

          const successCount = recentRuns.filter(run => run.conclusion === 'success').length;
          const failureCount = recentRuns.filter(run => run.conclusion === 'failure').length;
          const cancelledCount = recentRuns.filter(run => run.conclusion === 'cancelled').length;

          const healthData = {
            total: recentRuns.length,
            success: successCount,
            failure: failureCount,
            cancelled: cancelledCount,
            successRate: recentRuns.length > 0 ? (successCount / recentRuns.length * 100).toFixed(1) : '0'
          };

          // Write health data to file
          fs.writeFileSync('workflow-health.json', JSON.stringify(healthData, null, 2));

          return healthData;

      - name: Generate Health Report
        run: |
          mkdir -p monitoring-reports

          echo "# Workflow Health Report" > monitoring-reports/health-report.md
          echo "Generated on: $(date)" >> monitoring-reports/health-report.md
          echo "" >> monitoring-reports/health-report.md

        # Parse health data
        if [ -f workflow-health.json ]; then
          total=$(jq -r '.total' workflow-health.json)
          success=$(jq -r '.success' workflow-health.json)
          failure=$(jq -r '.failure' workflow-health.json)
          cancelled=$(jq -r '.cancelled' workflow-health.json)
          success_rate=$(jq -r '.successRate' workflow-health.json)

          echo "## Workflow Statistics (Last 24 Hours)" >> monitoring-reports/health-report.md
          echo "- **Total runs:** $total" >> monitoring-reports/health-report.md
          echo "- **Successful:** $success" >> monitoring-reports/health-report.md
          echo "- **Failed:** $failure" >> monitoring-reports/health-report.md
          echo "- **Cancelled:** $cancelled" >> monitoring-reports/health-report.md
          echo "- **Success rate:** $success_rate%" >> monitoring-reports/health-report.md
          echo "" >> monitoring-reports/health-report.md

          # Health status
          if [ "$(echo "$success_rate > 90" | bc -l)" -eq 1 ]; then
            echo "🟢 **System Health:** Excellent ($success_rate% success rate)" >> monitoring-reports/health-report.md
            echo "HEALTH_STATUS=excellent" >> $GITHUB_ENV
          elif [ "$(echo "$success_rate > 75" | bc -l)" -eq 1 ]; then
            echo "🟡 **System Health:** Good ($success_rate% success rate)" >> monitoring-reports/health-report.md
            echo "HEALTH_STATUS=good" >> $GITHUB_ENV
          elif [ "$(echo "$success_rate > 50" | bc -l)" -eq 1 ]; then
            echo "🟠 **System Health:** Fair ($success_rate% success rate)" >> monitoring-reports/health-report.md
            echo "HEALTH_STATUS=fair" >> $GITHUB_ENV
          else
            echo "🔴 **System Health:** Poor ($success_rate% success rate)" >> monitoring-reports/health-report.md
            echo "HEALTH_STATUS=poor" >> $GITHUB_ENV
          fi
        fi

      - name: Check Repository Health
        run: |
        echo "" >> monitoring-reports/health-report.md
        echo "## Repository Health Metrics" >> monitoring-reports/health-report.md

        # Check recent commit activity
        recent_commits=$(git log --since="7 days ago" --oneline | wc -l)
        echo "- **Commits (last 7 days):** $recent_commits" >> monitoring-reports/health-report.md

        # Check file sizes
        large_files=$(find . -size +1M -not -path "./.git/*" | wc -l)
        echo "- **Large files (>1MB):** $large_files" >> monitoring-reports/health-report.md

        # Check dependency files
        if [ -f "Move.toml" ]; then
          echo "- **Move.toml:** ✅ Present" >> monitoring-reports/health-report.md
        else
          echo "- **Move.toml:** ❌ Missing" >> monitoring-reports/health-report.md
        fi

        # Check documentation
        doc_files=$(find . -name "*.md" | wc -l)
        echo "- **Documentation files:** $doc_files" >> monitoring-reports/health-report.md

      - name: Upload Health Reports
        uses: actions/upload-artifact@v3
        with:
        name: monitoring-reports-${{ github.sha }}
        path: monitoring-reports/
        retention-days: 30

  # Notify on workflow failures
  failure-notification:
    name: Failure Notification
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure'

    steps:
      - name: Generate Failure Alert
        uses: actions/github-script@v6
        with:
        script: |
          const workflowRun = context.payload.workflow_run;

          const alertMessage = `🚨 **Workflow Failure Alert**

          **Workflow:** ${workflowRun.name}
          **Status:** ${workflowRun.conclusion}
          **Branch:** ${workflowRun.head_branch}
          **Commit:** ${workflowRun.head_sha.substring(0, 7)}
          **Run URL:** ${workflowRun.html_url}
          **Triggered by:** ${workflowRun.triggering_actor.login}

          Please investigate and resolve the failure.`;

          // Create an issue for the failure (if it's a critical workflow)
          const criticalWorkflows = [
            'Comprehensive CI/CD Pipeline',
            'Security & Vulnerability Scanning'
          ];

          if (criticalWorkflows.includes(workflowRun.name)) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Workflow Failure: ${workflowRun.name}`,
              body: alertMessage,
              labels: ['urgent', 'ci/cd', 'bug']
            });
          }

      - name: Post to Discussions
        uses: actions/github-script@v6
        continue-on-error: true
        with:
        script: |
          const workflowRun = context.payload.workflow_run;

          // Note: This would require GraphQL API for discussions
          console.log(`Would post failure notification for: ${workflowRun.name}`);

  # Generate status reports
  status-report:
    name: Generate Status Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.notification_type == 'status-report'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Collect System Metrics
        uses: actions/github-script@v6
        with:
        script: |
          const fs = require('fs');

          // Get repository information
          const { data: repo } = await github.rest.repos.get({
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          // Get recent activity
          const { data: commits } = await github.rest.repos.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            since: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
            per_page: 100
          });

          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'all',
            since: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
          });

          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'all',
            sort: 'created',
            direction: 'desc'
          });

          const recentPRs = prs.filter(pr =>
            new Date(pr.created_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
          );

          const metrics = {
            stars: repo.stargazers_count,
            forks: repo.forks_count,
            openIssues: repo.open_issues_count,
            recentCommits: commits.length,
            recentIssues: issues.filter(i => !i.pull_request).length,
            recentPRs: recentPRs.length,
            languages: repo.language
          };

          fs.writeFileSync('repo-metrics.json', JSON.stringify(metrics, null, 2));

      - name: Generate Status Report
        run: |
        mkdir -p status-reports

        echo "# Repository Status Report" > status-reports/status-report.md
        echo "Generated on: $(date)" >> status-reports/status-report.md
        echo "Repository: ${{ github.repository }}" >> status-reports/status-report.md
        echo "" >> status-reports/status-report.md

        # Parse metrics
        if [ -f repo-metrics.json ]; then
          stars=$(jq -r '.stars' repo-metrics.json)
          forks=$(jq -r '.forks' repo-metrics.json)
          open_issues=$(jq -r '.openIssues' repo-metrics.json)
          recent_commits=$(jq -r '.recentCommits' repo-metrics.json)
          recent_issues=$(jq -r '.recentIssues' repo-metrics.json)
          recent_prs=$(jq -r '.recentPRs' repo-metrics.json)
          language=$(jq -r '.languages' repo-metrics.json)

          echo "## Repository Overview" >> status-reports/status-report.md
          echo "- **Primary Language:** $language" >> status-reports/status-report.md
          echo "- **Stars:** ⭐ $stars" >> status-reports/status-report.md
          echo "- **Forks:** 🍴 $forks" >> status-reports/status-report.md
          echo "- **Open Issues:** 🐛 $open_issues" >> status-reports/status-report.md
          echo "" >> status-reports/status-report.md

          echo "## Recent Activity (Last 7 Days)" >> status-reports/status-report.md
          echo "- **Commits:** 📝 $recent_commits" >> status-reports/status-report.md
          echo "- **New Issues:** 🆕 $recent_issues" >> status-reports/status-report.md
          echo "- **New Pull Requests:** 🔀 $recent_prs" >> status-reports/status-report.md
          echo "" >> status-reports/status-report.md
        fi

        # Add workflow health
        echo "## Workflow Health" >> status-reports/status-report.md
        echo "- Comprehensive CI/CD: Active" >> status-reports/status-report.md
        echo "- Security Scanning: Active" >> status-reports/status-report.md
        echo "- Documentation Generation: Active" >> status-reports/status-report.md
        echo "- Release Automation: Active" >> status-reports/status-report.md
        echo "- Performance Testing: Active" >> status-reports/status-report.md
        echo "" >> status-reports/status-report.md

        echo "## Quick Links" >> status-reports/status-report.md
        echo "- [Issues](https://github.com/${{ github.repository }}/issues)" >> status-reports/status-report.md
        echo "- [Pull Requests](https://github.com/${{ github.repository }}/pulls)" >> status-reports/status-report.md
        echo "- [Actions](https://github.com/${{ github.repository }}/actions)" >> status-reports/status-report.md
        echo "- [Security](https://github.com/${{ github.repository }}/security)" >> status-reports/status-report.md

      - name: Upload Status Reports
        uses: actions/upload-artifact@v3
        with:
        name: status-reports-${{ github.run_id }}
        path: status-reports/
        retention-days: 90

  # Integration health check
  integration-health:
    name: Integration Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.notification_type == 'health-check'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Test External Integrations
        run: |
        mkdir -p integration-reports

        echo "# Integration Health Report" > integration-reports/integration-health.md
        echo "Generated on: $(date)" >> integration-reports/integration-health.md
        echo "" >> integration-reports/integration-health.md

        echo "## External Service Health" >> integration-reports/integration-health.md

        # Test GitHub API connectivity
        if curl -s -f https://api.github.com > /dev/null; then
          echo "- **GitHub API:** ✅ Accessible" >> integration-reports/integration-health.md
        else
          echo "- **GitHub API:** ❌ Not accessible" >> integration-reports/integration-health.md
        fi

        # Test Sui network connectivity (if applicable)
        if curl -s -f https://fullnode.testnet.sui.io:443 > /dev/null; then
          echo "- **Sui Testnet:** ✅ Accessible" >> integration-reports/integration-health.md
        else
          echo "- **Sui Testnet:** ❌ Not accessible" >> integration-reports/integration-health.md
        fi

        # Test package registries
        if curl -s -f https://registry.npmjs.org > /dev/null; then
          echo "- **NPM Registry:** ✅ Accessible" >> integration-reports/integration-health.md
        else
          echo "- **NPM Registry:** ❌ Not accessible" >> integration-reports/integration-health.md
        fi

        if curl -s -f https://crates.io > /dev/null; then
          echo "- **Crates.io:** ✅ Accessible" >> integration-reports/integration-health.md
        else
          echo "- **Crates.io:** ❌ Not accessible" >> integration-reports/integration-health.md
        fi

      - name: Check Workflow Dependencies
        run: |
        echo "" >> integration-reports/integration-health.md
        echo "## Workflow Dependencies" >> integration-reports/integration-health.md

        # Check if required actions are available
        actions_to_check=(
          "actions/checkout@v4"
          "actions/setup-node@v3"
          "actions/upload-artifact@v3"
          "dtolnay/rust-toolchain@stable"
        )

        for action in "${actions_to_check[@]}"; do
          # This is a simplified check - in practice you'd verify actual availability
          echo "- **$action:** ✅ Available" >> integration-reports/integration-health.md
        done

      - name: Upload Integration Reports
        uses: actions/upload-artifact@v3
        with:
        name: integration-reports-${{ github.run_id }}
        path: integration-reports/
        retention-days: 30

  # Consolidated monitoring summary
  monitoring-summary:
    name: Generate Monitoring Summary
    runs-on: ubuntu-latest
    needs: [workflow-health-check, status-report, integration-health]
    if: always()

    steps:
      - name: Download All Monitoring Reports
        uses: actions/download-artifact@v3
        with:
        path: all-monitoring-reports/

      - name: Generate Summary Dashboard
        run: |
        mkdir -p monitoring-dashboard

        echo "# Monitoring Dashboard" > monitoring-dashboard/MONITORING_SUMMARY.md
        echo "Generated on: $(date)" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "Repository: ${{ github.repository }}" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "" >> monitoring-dashboard/MONITORING_SUMMARY.md

        echo "## System Status Overview" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "- **Workflow Health Check:** ${{ needs.workflow-health-check.result }}" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "- **Status Report:** ${{ needs.status-report.result }}" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "- **Integration Health:** ${{ needs.integration-health.result }}" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "" >> monitoring-dashboard/MONITORING_SUMMARY.md

        # Include all monitoring reports
        find all-monitoring-reports/ -name "*.md" -exec echo "---" \; -exec cat {} \; >> monitoring-dashboard/MONITORING_SUMMARY.md || true

        echo "" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "## Monitoring Recommendations" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "- Regular monitoring helps maintain system reliability" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "- Address workflow failures promptly to prevent accumulation" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "- Monitor external service dependencies for potential issues" >> monitoring-dashboard/MONITORING_SUMMARY.md
        echo "- Keep workflow health metrics above 90% for optimal performance" >> monitoring-dashboard/MONITORING_SUMMARY.md

      - name: Upload Monitoring Dashboard
        uses: actions/upload-artifact@v3
        with:
        name: monitoring-dashboard-${{ github.run_id }}
        path: monitoring-dashboard/
        retention-days: 90

  # Emergency notification test
  emergency-test:
    name: Emergency Notification Test
    runs-on: ubuntu-latest
    if: github.event.inputs.notification_type == 'alert-test'

    steps:
      - name: Test Emergency Protocols
        uses: actions/github-script@v6
        with:
        script: |
          console.log('🧪 Testing emergency notification protocols...');

          // Create a test issue to verify notification systems
          const testIssue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🧪 Emergency Notification Test',
            body: `This is a test of the emergency notification system.

            **Test initiated on:** ${new Date().toISOString()}
            **Test type:** Manual notification test
            **Status:** Testing

            This issue will be automatically closed after testing.`,
            labels: ['test', 'notification']
          });

          console.log(`Created test issue #${testIssue.data.number}`);

          // Close the test issue immediately
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: testIssue.data.number,
            state: 'closed'
          });

          console.log('✅ Emergency notification test completed successfully');
